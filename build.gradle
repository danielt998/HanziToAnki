plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'idea'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.adarshr.test-logger' version '3.2.0'
}

group 'org.example'
version '1.0.0'

sourceCompatibility = 17

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.apache.tika:tika-core:2.7.0'
    implementation 'org.jetbrains:annotations:24.0.0'
    implementation 'junit:junit:4.13.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.9.2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

mainClassName = 'server.Application' //'GUIStarter'

compileJava {options.encoding = "UTF-8"} // overcome Ã¼ cp-1252 issues
compileTestJava {options.encoding = "UTF-8"}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}

task stage {
    dependsOn build
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'server.Application'
        )
    }
    archiveFileName = "heroku-gradle-spring-boot.jar"
    baseName = 'heroku-gradle-spring-boot'
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(configurations.runtimeClasspath)
}

stage.dependsOn(copyToLib)